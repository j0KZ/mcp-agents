#!/bin/bash
#
# Pre-push hook for @j0kz/mcp-agents
# Runs comprehensive checks before pushing (~2-5 minutes)
#
# Skip: git push --no-verify
#

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}ðŸš€ Running pre-push checks...${NC}\n"

# Get current branch
BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo -e "${BLUE}Branch: ${BRANCH}${NC}\n"

# Skip checks for WIP/experimental branches
if [[ $BRANCH == wip/* ]] || [[ $BRANCH == experimental/* ]]; then
  echo -e "${YELLOW}âš  WIP/experimental branch detected. Skipping pre-push checks.${NC}"
  echo -e "${YELLOW}Remember to run checks before merging!${NC}\n"
  exit 0
fi

# Check 1: Run all tests
echo -e "${BLUE}[1/5] Running test suite...${NC}"
if npm test 2>&1 | tee /tmp/test-output.txt; then
  TEST_COUNT=$(grep -oP '\d+(?= passing)' /tmp/test-output.txt | tail -1 || echo "unknown")
  echo -e "${GREEN}âœ“ All tests passed (${TEST_COUNT} tests)${NC}\n"
else
  echo -e "${RED}âœ— Tests failed${NC}"
  echo -e "${YELLOW}Fix failing tests before pushing${NC}\n"
  exit 1
fi

# Check 2: Test coverage
echo -e "${BLUE}[2/5] Checking test coverage...${NC}"
if npm run test:coverage 2>&1 | tee /tmp/coverage-output.txt; then
  # Extract coverage percentage (simplified)
  COVERAGE=$(grep -oP '\d+(?=\.\d+% Statements)' /tmp/coverage-output.txt | head -1 || echo "0")

  if [ "$COVERAGE" -ge 75 ]; then
    echo -e "${GREEN}âœ“ Coverage passed: ${COVERAGE}% (target: 75%)${NC}\n"
  else
    echo -e "${YELLOW}âš  Coverage below target: ${COVERAGE}% (target: 75%)${NC}"
    echo -e "${YELLOW}Consider adding more tests${NC}\n"
    # Warning only, don't block
  fi
else
  echo -e "${YELLOW}âš  Coverage check failed${NC}\n"
  # Don't block on coverage calculation errors
fi

# Check 3: Build verification
echo -e "${BLUE}[3/5] Verifying build...${NC}"
if npm run build 2>&1 | grep -q "error" && ! grep -q "0 error"; then
  echo -e "${RED}âœ— Build failed${NC}\n"
  exit 1
else
  echo -e "${GREEN}âœ“ Build successful${NC}\n"
fi

# Check 4: Version sync check (monorepo specific)
echo -e "${BLUE}[4/5] Checking version synchronization...${NC}"
if npm run version:check-shared 2>&1 | grep -q "error"; then
  echo -e "${YELLOW}âš  Version mismatch detected${NC}"
  echo -e "${YELLOW}Run: npm run version:sync${NC}\n"
  # Warning only for version sync
else
  echo -e "${GREEN}âœ“ Versions synchronized${NC}\n"
fi

# Check 5: Security & Architecture (on important branches)
if [[ $BRANCH == main ]] || [[ $BRANCH == release/* ]] || [[ $BRANCH == pr/* ]]; then
  echo -e "${BLUE}[5/5] Running security and architecture checks...${NC}"
  echo -e "${YELLOW}(Important branch detected: $BRANCH)${NC}\n"

  # Simplified check - look for common security issues in changed files
  CHANGED_FILES=$(git diff --name-only origin/$BRANCH..HEAD 2>/dev/null || git diff --name-only HEAD~1..HEAD)

  SECURITY_ISSUES=0
  for file in $CHANGED_FILES; do
    if [ -f "$file" ]; then
      # Check for hardcoded secrets/tokens
      if grep -iE '(api[_-]?key|password|secret|token|auth)["\s]*[:=]' "$file" 2>/dev/null; then
        echo -e "  ${RED}âœ— Potential secret in $file${NC}"
        ((SECURITY_ISSUES++))
      fi

      # Check for SQL injection patterns
      if grep -E 'execute.*\+.*user|query.*\+.*user|sql.*\+.*user' "$file" 2>/dev/null; then
        echo -e "  ${YELLOW}âš  Potential SQL injection in $file${NC}"
      fi
    fi
  done

  if [ $SECURITY_ISSUES -gt 0 ]; then
    echo -e "${RED}âœ— Security check found $SECURITY_ISSUES issue(s)${NC}\n"
    exit 1
  else
    echo -e "${GREEN}âœ“ Security and architecture checks passed${NC}\n"
  fi
else
  echo -e "${BLUE}[5/5] Skipping advanced checks (feature branch)${NC}\n"
fi

# All checks passed
echo -e "${GREEN}âœ… All pre-push checks passed!${NC}"
echo -e "${GREEN}Safe to push to ${BRANCH}${NC}\n"

exit 0
