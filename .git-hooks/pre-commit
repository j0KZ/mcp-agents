#!/bin/bash
#
# Pre-commit hook for @j0kz/mcp-agents
# Runs fast quality checks on staged files (~30 seconds)
#
# Skip: git commit --no-verify
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔍 Running pre-commit checks...${NC}\n"

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|js|tsx|jsx)$' || true)

if [ -z "$STAGED_FILES" ]; then
  echo -e "${GREEN}✓ No TypeScript/JavaScript files staged. Skipping checks.${NC}"
  exit 0
fi

echo -e "${BLUE}📝 Staged files:${NC}"
echo "$STAGED_FILES" | sed 's/^/  /'
echo ""

# Check 1: ESLint
echo -e "${BLUE}[1/4] Running ESLint...${NC}"
if command -v npx &> /dev/null; then
  # Use --no-warn-ignored to suppress warnings about ignored files
  if echo "$STAGED_FILES" | xargs npx eslint --no-warn-ignored --max-warnings 0 2>/dev/null; then
    echo -e "${GREEN}✓ ESLint passed${NC}\n"
  else
    echo -e "${RED}✗ ESLint found issues${NC}"
    echo -e "${YELLOW}Fix with: npm run lint:fix${NC}\n"
    exit 1
  fi
else
  echo -e "${YELLOW}⚠ ESLint not found, skipping${NC}\n"
fi

# Check 2: Prettier
echo -e "${BLUE}[2/4] Checking code formatting...${NC}"
if command -v npx &> /dev/null; then
  if echo "$STAGED_FILES" | xargs npx prettier --check 2>/dev/null; then
    echo -e "${GREEN}✓ Formatting passed${NC}\n"
  else
    echo -e "${RED}✗ Files need formatting${NC}"
    echo -e "${YELLOW}Fix with: npm run format${NC}\n"
    exit 1
  fi
else
  echo -e "${YELLOW}⚠ Prettier not found, skipping${NC}\n"
fi

# Check 3: TypeScript compilation
echo -e "${BLUE}[3/4] Checking TypeScript compilation...${NC}"
if command -v npx &> /dev/null; then
  # Only check packages with staged files
  for file in $STAGED_FILES; do
    if [[ $file == packages/* ]]; then
      PACKAGE_DIR=$(echo $file | cut -d'/' -f1-2)
      if [ -f "$PACKAGE_DIR/tsconfig.json" ]; then
        echo -e "  Checking $PACKAGE_DIR..."
        if ! (cd "$PACKAGE_DIR" && npx tsc --noEmit 2>&1 | grep -v "Unreachable code detected" || true); then
          echo -e "${RED}✗ TypeScript compilation failed in $PACKAGE_DIR${NC}\n"
          exit 1
        fi
      fi
    fi
  done
  echo -e "${GREEN}✓ TypeScript compilation passed${NC}\n"
else
  echo -e "${YELLOW}⚠ TypeScript not found, skipping${NC}\n"
fi

# Check 4: Quick code review (using MCP enhancer logic)
echo -e "${BLUE}[4/4] Quick code review (moderate severity)...${NC}"

# Count issues by running a simple pattern check
ERROR_COUNT=0
WARNING_COUNT=0

for file in $STAGED_FILES; do
  # Skip test files
  if [[ $file == *.test.* ]] || [[ $file == *.spec.* ]]; then
    continue
  fi

  # Check for common issues
  if grep -q "console\.log" "$file" 2>/dev/null; then
    echo -e "  ${YELLOW}⚠ console.log found in $file${NC}"
    WARNING_COUNT=$((WARNING_COUNT + 1))
  fi

  if grep -q "debugger" "$file" 2>/dev/null; then
    echo -e "  ${RED}✗ debugger statement in $file${NC}"
    ERROR_COUNT=$((ERROR_COUNT + 1))
  fi

  if grep -q "TODO\|FIXME" "$file" 2>/dev/null; then
    echo -e "  ${YELLOW}⚠ TODO/FIXME found in $file${NC}"
    WARNING_COUNT=$((WARNING_COUNT + 1))
  fi
done

if [ $ERROR_COUNT -gt 0 ]; then
  echo -e "${RED}✗ Code review found $ERROR_COUNT error(s)${NC}\n"
  exit 1
elif [ $WARNING_COUNT -gt 0 ]; then
  echo -e "${YELLOW}⚠ Code review found $WARNING_COUNT warning(s)${NC}"
  echo -e "${YELLOW}Consider fixing before committing${NC}\n"
  # Warnings don't block commit
else
  echo -e "${GREEN}✓ Code review passed${NC}\n"
fi

# All checks passed
echo -e "${GREEN}✅ All pre-commit checks passed!${NC}"
echo -e "${GREEN}Ready to commit.${NC}\n"

exit 0
