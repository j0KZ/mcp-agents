#!/bin/bash
#
# Commit-msg hook for @j0kz/mcp-agents
# Validates conventional commit format (~1 second)
#
# Skip: git commit --no-verify
#

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Get commit message file
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Skip merge commits
if echo "$COMMIT_MSG" | grep -q "^Merge "; then
  exit 0
fi

# Skip revert commits
if echo "$COMMIT_MSG" | grep -q "^Revert "; then
  exit 0
fi

echo -e "${BLUE}üìù Validating commit message...${NC}\n"

# Conventional commit pattern
# type(scope): description
# OR
# type: description
PATTERN="^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .{10,100}"

if echo "$COMMIT_MSG" | grep -qE "$PATTERN"; then
  echo -e "${GREEN}‚úì Commit message follows conventional commits format${NC}\n"
  exit 0
fi

# Failed validation - provide helpful feedback
echo -e "${RED}‚úó Commit message does not follow conventional commits format${NC}\n"

echo -e "${YELLOW}Expected format:${NC}"
echo -e "  type(scope): description\n"

echo -e "${YELLOW}Valid types:${NC}"
echo -e "  feat:     New feature"
echo -e "  fix:      Bug fix"
echo -e "  docs:     Documentation changes"
echo -e "  style:    Code style changes (formatting, etc.)"
echo -e "  refactor: Code refactoring"
echo -e "  perf:     Performance improvements"
echo -e "  test:     Adding or updating tests"
echo -e "  build:    Build system changes"
echo -e "  ci:       CI/CD changes"
echo -e "  chore:    Other changes (dependencies, etc.)"
echo -e "  revert:   Revert a previous commit\n"

echo -e "${YELLOW}Examples:${NC}"
echo -e "  ${GREEN}feat(smart-reviewer): add auto-fix suggestions${NC}"
echo -e "  ${GREEN}fix: handle null pointer in parser${NC}"
echo -e "  ${GREEN}docs: update README with installation steps${NC}"
echo -e "  ${GREEN}test(orchestrator): add integration tests${NC}\n"

echo -e "${YELLOW}Your message:${NC}"
echo -e "  $COMMIT_MSG\n"

echo -e "${YELLOW}Issues detected:${NC}"

# Provide specific feedback
if ! echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)"; then
  echo -e "  ${RED}‚úó Missing or invalid type${NC}"
fi

if ! echo "$COMMIT_MSG" | grep -q ":"; then
  echo -e "  ${RED}‚úó Missing colon after type/scope${NC}"
fi

MSG_LENGTH=$(echo "$COMMIT_MSG" | head -1 | awk -F': ' '{print $2}' | wc -c)
if [ "$MSG_LENGTH" -lt 10 ]; then
  echo -e "  ${RED}‚úó Description too short (min 10 characters)${NC}"
fi

if [ "$MSG_LENGTH" -gt 100 ]; then
  echo -e "  ${RED}‚úó Description too long (max 100 characters)${NC}"
fi

echo ""
echo -e "${BLUE}Skip validation: git commit --no-verify${NC}"
echo -e "${BLUE}Edit message: git commit --amend${NC}\n"

exit 1
